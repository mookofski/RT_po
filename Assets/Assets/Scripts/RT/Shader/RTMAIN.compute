#pragma kernel CSMain
#include "RT_Helper.cginc"

RWTexture2D<float4> Result;

//Camera to World
float4x4 _C2WMX;
//Inverse Projection
float4x4 _IPJMX;

int _TriCount;
float4 _VertexBuffer[500];

//float _offsets[15];
//SetfloatArrayが機能しないため点インデックス4次元目にオフセットを記録
//* XYZ=Index, W, Object ID*2 = Object offset start, ID*2+1= Object vertex Count 
float4 _VertexIndice[500];
float4 _NormalArray[500];

//Per Instance Data
//_Inst=個体毎データ
float4 _Inst_Translate[15];
float4x4 _Inst_ScaleRot[15];
float4x4 _Inst_RotOnly[15];
//XYZ=色　w=モデルID
float4 _Inst_ColandIndex[15];
//X=衝突時処理 y=屈折度数
float4 _Type_Rindex[15];
int _InstanceCount;


[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    float2 resolution;
    Result.GetDimensions(resolution.x,resolution.y);

    float2 uv=(id.xy/resolution)*2-1;

    collision col;
    Ray ray;
    
    
    //*Scaler initialization
    //スケーラー初期化
    ray.rindex=1;
    ray.refracted=false;
    
    col.dist=MaxDist;   
    col.type=0;
    col.uv=float2(0,0);

    //*Vector Initialization
　　//ベクター初期化
　　
　　//レイ方向
    ray.dir=mul(_IPJMX,float4(uv,0,1)).xyz;
    //レイ正規化
    ray.dir=normalize(mul(_C2WMX,float4(ray.dir,0)).xyz);
    //レイ座標
    ray.orig=mul(_C2WMX,float4(0,0,0,1)).xyz;
    
    col.Pos=ray.orig;
    col.color=float4(ray.dir.xyz,1);


    tri T;
//反射/屈折ループ
    for(int i=0;i<5;i++)
    {
        //*RayInitialization
        //ループ毎初期化
        ray.orig=col.Pos;
        //屈折時同じ三角に当たらないよう少し前に動かす
        ray.orig+=(ray.dir*1.3f);   
        col.dist=MaxDist;

        //*_VertexIndice*//
        //* XYZ=Each represent Index of _VertexBuffer
        //XYZ=三角毎インデックス
        //* W, Object ID*2 = Object offset start, ID*2+1= Object vertex Count 
	//W=モデルID, W+1=モデル点数 W+2=モデル毎点インデックスのオフセット
        //*_Inst_ColandIndex*// 
        //xyz= rgb, w=model id
	//XYZ=RGB色　W=対応モデルID


        float3 normbuf;

        //*loop through each instances
	//モデル個体毎ループ
        for(int instance=0;instance<_InstanceCount;instance++)
        {
	//衝突チェック
            float Collided=col.dist;

		//*IndexOffset*//
            //* indices are stored in cocecutive integer vector array but each model's index starts from 0
            //モデル毎の点座標インデックスはどれも0から始まるため、
            //* causing it to access same vertex without this
            //モデルごとの点座標開始点オフセットが必要
            int IndexOffset=_VertexIndice[_Inst_ColandIndex[instance].w*3+2].w;

	//テスト対象座標、サイズと回転
            float4x4 CurMX =_Inst_ScaleRot[instance];
            float4x4 CurRot=_Inst_RotOnly[instance];
            float3 CurTranslate=_Inst_Translate[instance].xyz;


            //*per each triangles
            //三角毎ループ
            for(
            int tr=//*index(ci.w)is *3ed to be used as vertex indice index
            _VertexIndice[_Inst_ColandIndex[instance].w*3].w;//*Beginning Offset of Model　元モデル三角インデックス開始点
            tr < 
            _VertexIndice[ _Inst_ColandIndex[instance].w*3   ].w+
            _VertexIndice[(_Inst_ColandIndex[instance].w*3)+1].w//*Triangle Count 三角数
            ;tr++)
            {
                /*
                T.v[0]=
                //*mul(_Inst_ScaleRot[instance], Scale and Rotation Matrix　サイズ、回転変換を現三角の点座標に適応
                //*_VertexBuffer[(int)_VertexIndice[tr].x]).xyz, Apply Rotation and Rot scale to the vert　
                //*+_Inst_Translate[instance].xyz;//Translate　座標変換

                */

                


                T.v[0]=mul(CurMX,
                (_VertexBuffer
                [_VertexIndice[tr].x//*Raw Index Of Model
                +IndexOffset
                ]
                )).xyz
                +CurTranslate;//*Translation


                T.v[1]=mul(CurMX,
                (_VertexBuffer
                [_VertexIndice[tr].y
                +IndexOffset
                ]
                )).xyz
                +CurTranslate; 


                T.v[2]=mul(CurMX,
                (_VertexBuffer
                [_VertexIndice[tr].z
                +IndexOffset
                ]
                )).xyz
                +CurTranslate;
                

                normbuf=mul(CurRot,_NormalArray[tr]).xyz;//現三角の法線

		//線三角衝突テスト
                HitTri(ray,col,T,float4(_Inst_ColandIndex[instance].xyz,_Type_Rindex[instance].y),_Type_Rindex[instance].x,normbuf);

		//衝突があった場合現モデルループを終了
		if(collided>col.dist)
		{
               // tr+=1000*(Collided!=col.dist);
		break;
		}
            }



        }



	//衝突処理
        switch(col.type)
        {
            default://衝突なし
            col.color=float4(ray.dir.xyz,1);
            i=32;
            break;
            
            case 0://*Opaque
            i=30;
            col.color=float4(col.uv,0,1);
            break;


            case 1://*Refration　屈折

            float ref=col.color.a; //color.a=屈折度数
            if(ray.refracted)
            {
                ref=1;
            }
            col.color.xyz*=0.7; 
            ray.dir=refr(ray,col.SurNorm,ray.rindex/ref);
            break;
            
            case 2://*Reflective　反射
            ray.dir=reflect(ray.dir,col.SurNorm);
            break;
            

        }
        
        col.SurNorm=(float3(0,0,0));
        col.type=-1;
    }   
    Result[id.xy] =float4(col.color.xyzw);

}

